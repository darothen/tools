#!/usr/bin/env python
"""
Commands:
    install - install the dotfiles into home directory; accept
              an argument for which machine's additional module
              to install (copied to ~/.bash_machine)
"""
from __future__ import print_function

from argh import arg, EntryPoint
import os, errno

DOTFILES = {
    'git': [ ".gitconfig", ".gitignore", ],
    'bash': [ '.bashrc', ] +
            [ ".bash_%s" % s for s in 
                ["aliases", "exports", "functions", 
                 "profile", "prompt"] ],
    'conda': [ '.condarc', ]
}

MACHINES = ["mbp", "legion", "svante", "yellowstone", "newton", 
            "ubuntu", ]

app = EntryPoint("dotfiles-handler")

def link(path_to_target, path_to_symlink):
    """ Convenience function for symlinking; takes care of 
    printing information and overwriting files if necessary. """
    
    link_str_fmt = "{mode:s} {target:s} -> {src:s}"

    MODE = "Linking"
    try:
        os.symlink(path_to_target, path_to_symlink)
    except OSError, e:
        if e.errno == errno.EEXIST: # File already exists
            os.remove(path_to_symlink)
            os.symlink(path_to_target, path_to_symlink)
            MODE = "Overwriting"

    print(link_str_fmt.format(mode=MODE, target=path_to_target,
                              src=path_to_symlink))


@app
@arg("machine", help="machine to copy to '.bash_machine'",
     choices=MACHINES)
def install(machine):
    
    HOME = os.environ['HOME']
    DOT_DIR = os.getcwd()

    if machine is None:
        print("Not looking for machine-specific additional file.")
    else:
        src = os.path.join(DOT_DIR, 'bash', '.bash_%s' % machine)
        dest = os.path.join(HOME, '.bash_machine')
        if os.path.exists(src):
            link(src, dest)

    for tool in DOTFILES:
        files = DOTFILES[tool]

        for f in files:
            src = os.path.join(DOT_DIR, tool, f)
            dest = os.path.join(HOME, f)

            link(src, dest)

if __name__ == "__main__":
    app()